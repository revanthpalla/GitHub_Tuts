# to check git version
>> git --version

# to check global config
>> git config --list --show-origin

>> git config --list

# to set username
>> git config --global user.name "revanthpalla"

# to set emailaddress
>> git config --global user.email "revanth4902@gmail.com"

# to create an empty git repo
>> git init

# to track files and folders
>> git status

# to add file to stage area 
>> git add <fileName>

# to commit changes (create a snapshot)
>> git commit -m <commit_msg>

# to remove a commit ID 

/* suppose we have 3 commit ID's 
commit1: 9A (latest one)
commit2: 92 (second older)
commit3: 8E (first older)

git reset 8E so after this all above commits will be deleted.
*/


***************************************************************************
Stashing Concept
***************************************************************************
1. To demonstrate stashing, you’ll go into your project and start working on a couple of files 
and possibly stage one of the changes. If you run git status, you can see your dirty state:

2. Now you want to switch branches, but you don’t want to commit what you’ve been working on yet, 
so you’ll stash the changes. To push a new stash onto your stack, run git stash or git stash push:

3. At this point, you can switch branches and do work elsewhere; your changes are stored on your stack. 
To see which stashes you’ve stored, you can use  

>> git stash list

4. To pop last stashed changes

>> git stash pop

5. To clear stash

>> git stash clear

# connect remote repository to local repository
>> git remote add origin <URL_name>

creates a new remote called origin located at https://github.com/revanthpalla/GitHub_Tuts.git
Once you do this, in your push commands, you can push to origin instead of typing out the whole URL.

>> git remote -v # to see list of URL's in your repo added to origin
 